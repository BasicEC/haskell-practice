module Lab1
    ( sumOfElems
    , sumOfElems2
    , sumOfElems3
    , sumOfElems4
    ) where

-- https://projecteuler.net/problem=2
-- Each new term in the Fibonacci sequence is generated by adding the previous two terms.
-- By starting with 1 and 2, the first 10 terms will be:
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
-- By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

-- Recursions
sumOfElems :: Integral t => t -> t
sumOfElems limit = go 0 1 0
  where
    go prev cur result
      | cur > limit = result
      | otherwise = go cur (prev + cur) $ if even cur then result + cur else result

sumOfElems2 :: Integral t => t -> t
sumOfElems2 limit = go 0 1
  where
    go prev cur
      | cur > limit = if even cur then cur else 0
      | otherwise = (if even cur then cur else 0) + go cur (prev + cur)

-- generation of data list using filter, takeWhile and infinity list
fibonacci :: [Integer]
fibonacci = go 0 1
  where
    go cur next = cur : go next (cur + next)

sumOfElems3 :: Integer -> Integer
sumOfElems3 limit = sum $ takeWhile (<= limit) $ filter even fibonacci

-- list comprehansion
sumOfElems4 :: Integer -> Integer
sumOfElems4 limit =
  sum $
    takeWhile (<= limit) $
      [x | let go cur next = cur : go next (cur + next), x <- go 0 1, even x]
